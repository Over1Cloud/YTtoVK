import logging
import requests
import sqlite3
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils import executor
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.contrib.fsm_storage.memory import MemoryStorage

# ‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
API_TOKEN = '–í–ê–®_TELEGRAM_API_TOKEN'
DEEPINFRA_API_KEY = '–í–ê–®_DEEPINFRA_API_KEY'
DEEPINFRA_API_BASE = 'https://api.deepinfra.com/v1'

# ‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ (aiogram 2.25.1)
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())
dp.middleware.setup(LoggingMiddleware())

# ‚úÖ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")

# ‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
def db_connection():
    return sqlite3.connect('chatbot.db', isolation_level=None, check_same_thread=False)

# ‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
def create_db():
    with db_connection() as conn:
        cursor = conn.cursor()
        cursor.execute('''CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            selected_model TEXT
        )''')

create_db()

# ‚úÖ –ö–æ–º–∞–Ω–¥–∞ /start ‚Äì –≤—ã–±–æ—Ä –º–æ–¥–µ–ª–∏
@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    keyboard = InlineKeyboardMarkup(row_width=1)
    keyboard.add(
        InlineKeyboardButton("üí¨ DeepSeek-R1 (–û–±—â–µ–Ω–∏–µ)", callback_data='select_model_deepseek'),
        InlineKeyboardButton("üíª Qwen2.5-Coder (–ö–æ–¥–∏–Ω–≥)", callback_data='select_model_qwen'),
        InlineKeyboardButton("üé® FLUX-1-dev (–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π)", callback_data='select_model_flux')
    )
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å:", reply_markup=keyboard)

# ‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏
@dp.callback_query_handler(lambda c: c.data.startswith('select_model_'))
async def process_model_selection(callback_query: types.CallbackQuery):
    model_map = {
        'select_model_deepseek': 'deepseek-ai/DeepSeek-R1',
        'select_model_qwen': 'Qwen/Qwen2.5-Coder-32B-Instruct',
        'select_model_flux': 'black-forest-labs/FLUX-1-dev'
    }
    selected_model = model_map[callback_query.data]
    user_id = callback_query.from_user.id

    with db_connection() as conn:
        cursor = conn.cursor()
        cursor.execute("INSERT OR REPLACE INTO users (user_id, selected_model) VALUES (?, ?)", (user_id, selected_model))

    await bot.send_message(user_id, f"‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏: `{selected_model}`\n–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ–±—â–µ–Ω–∏—è –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É `/generate_image` –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
    await callback_query.answer()

# ‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message_handler()
async def handle_message(message: types.Message):
    user_id = message.from_user.id
    with db_connection() as conn:
        cursor = conn.cursor()
        cursor.execute("SELECT selected_model FROM users WHERE user_id=?", (user_id,))
        result = cursor.fetchone()

    if result:
        selected_model = result['selected_model']
        if selected_model == 'black-forest-labs/FLUX-1-dev':
            await message.answer("üé® –≠—Ç–∞ –º–æ–¥–µ–ª—å –¥–ª—è **–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π**. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É `/generate_image`.")
        else:
            response = generate_text_response(selected_model, message.text)
            await message.answer(response)
    else:
        await message.answer("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start.")

# ‚úÖ –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
def generate_text_response(model, user_input):
    try:
        url = f"{DEEPINFRA_API_BASE}/openai/chat/completions"
        headers = {
            "Authorization": f"Bearer {DEEPINFRA_API_KEY}",
            "Content-Type": "application/json"
        }
        data = {
            "model": model,
            "messages": [
                {"role": "system", "content": "–í—ã - –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç."},
                {"role": "user", "content": user_input}
            ],
            "max_tokens": 150
        }
        response = requests.post(url, headers=headers, json=data)
        if response.status_code == 200:
            result = response.json()
            return result['choices'][0]['message']['content'].strip()
        else:
            logging.error(f"–û—à–∏–±–∫–∞ API DeepInfra: {response.status_code} - {response.text}")
            return "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞."
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞: {e}")
        return "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞."

# ‚úÖ –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
@dp.message_handler(commands=['generate_image'])
async def generate_image(message: types.Message):
    user_id = message.from_user.id
    with db_connection() as conn:
        cursor = conn.cursor()
        cursor.execute("SELECT selected_model FROM users WHERE user_id=?", (user_id,))
        result = cursor.fetchone()

    if result:
        selected_model = result['selected_model']
        if selected_model == 'black-forest-labs/FLUX-1-dev':
            prompt = message.get_args()
            if not prompt:
                await message.answer("‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ—Å–ª–µ `/generate_image`.")
                return
            image_url = generate_image_response(selected_model, prompt)
            if image_url:
                await message.answer_photo(image_url)
            else:
                await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")
        else:
            await message.answer("‚ö†Ô∏è –≠—Ç–∞ –º–æ–¥–µ–ª—å –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π. –í—ã–±–µ—Ä–∏—Ç–µ FLUX-1-dev.")
    else:
        await message.answer("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start.")

# ‚úÖ –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
def generate_image_response(model, prompt):
    try:
        url = f"{DEEPINFRA_API_BASE}/models/{model}/generate"
        headers = {
            "Authorization": f"Bearer {DEEPINFRA_API_KEY}",
            "Content-Type": "application/json"
        }
        data = {"prompt": prompt, "num_images": 1}
        response = requests.post(url, headers=headers, json=data)

        if response.status_code == 200:
            result = response.json()
            return result['data'][0]['url']  # API –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        else:
            logging.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {response.status_code} - {response.text}")
            return None
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        return None

# ‚úÖ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ (aiogram 2.25.1)
if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
