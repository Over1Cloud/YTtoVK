import logging
import requests
import sqlite3
import os
import io
from PyPDF2 import PdfReader
from docx import Document
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils import executor
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.contrib.fsm_storage.memory import MemoryStorage

# ‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
API_TOKEN = '–í–ê–®_TELEGRAM_API_TOKEN'
DEEPINFRA_API_KEY = '–í–ê–®_DEEPINFRA_API_KEY'
DEEPINFRA_API_BASE = 'https://api.deepinfra.com/v1'

# ‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ (aiogram 2.25.1)
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())
dp.middleware.setup(LoggingMiddleware())

# ‚úÖ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")

# ‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
def db_connection():
    return sqlite3.connect('chatbot.db', isolation_level=None, check_same_thread=False)

# ‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def create_db():
    with db_connection() as conn:
        cursor = conn.cursor()
        cursor.execute('''CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            selected_model TEXT DEFAULT 'deepseek-ai/DeepSeek-V3'
        )''')
        cursor.execute('''CREATE TABLE IF NOT EXISTS messages (
            user_id INTEGER,
            message TEXT,
            response TEXT,
            timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
        )''')

create_db()

# ‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
def save_message(user_id, user_message, bot_response):
    with db_connection() as conn:
        cursor = conn.cursor()
        cursor.execute("INSERT INTO messages (user_id, message, response) VALUES (?, ?, ?)",
                       (user_id, user_message, bot_response))
        conn.commit()

# ‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
def get_message_history(user_id, limit=5):
    with db_connection() as conn:
        cursor = conn.cursor()
        cursor.execute("SELECT message, response FROM messages WHERE user_id=? ORDER BY timestamp DESC LIMIT ?",
                       (user_id, limit))
        rows = cursor.fetchall()
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é –≤ –≤–∏–¥–µ –¥–∏–∞–ª–æ–≥–∞
    history = []
    for row in reversed(rows):
        history.append({"role": "user", "content": row[0]})
        history.append({"role": "assistant", "content": row[1]})
    
    return history

# ‚úÖ –ö–æ–º–∞–Ω–¥–∞ /start ‚Äì –≤—ã–±–æ—Ä –º–æ–¥–µ–ª–∏
@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    keyboard = InlineKeyboardMarkup(row_width=1)
    keyboard.add(
        InlineKeyboardButton("‚ö° DeepSeek-V3 (–ë—ã—Å—Ç—Ä–æ–µ –æ–±—â–µ–Ω–∏–µ)", callback_data='select_model_deepseek_v3'),
        InlineKeyboardButton("üí¨ DeepSeek-R1 (–û–±—â–µ–Ω–∏–µ)", callback_data='select_model_deepseek_r1'),
        InlineKeyboardButton("üíª Qwen2.5-Coder (–ö–æ–¥–∏–Ω–≥)", callback_data='select_model_qwen'),
        InlineKeyboardButton("üé® FLUX-1-dev (–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π)", callback_data='select_model_flux')
    )
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å:", reply_markup=keyboard)

# ‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏
@dp.callback_query_handler(lambda c: c.data.startswith('select_model_'))
async def process_model_selection(callback_query: types.CallbackQuery):
    model_map = {
        'select_model_deepseek_v3': 'deepseek-ai/DeepSeek-V3',
        'select_model_deepseek_r1': 'deepseek-ai/DeepSeek-R1',
        'select_model_qwen': 'Qwen/Qwen2.5-Coder-32B-Instruct',
        'select_model_flux': 'black-forest-labs/FLUX-1-dev'
    }
    selected_model = model_map[callback_query.data]
    user_id = callback_query.from_user.id

    with db_connection() as conn:
        cursor = conn.cursor()
        cursor.execute("INSERT INTO users (user_id, selected_model) VALUES (?, ?) ON CONFLICT(user_id) DO UPDATE SET selected_model=?",
                       (user_id, selected_model, selected_model))

    await bot.send_message(user_id, f"‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏: `{selected_model}`.\n–¢–µ–ø–µ—Ä—å –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
    await callback_query.answer()

# ‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message_handler()
async def handle_message(message: types.Message):
    user_id = message.from_user.id
    with db_connection() as conn:
        cursor = conn.cursor()
        cursor.execute("SELECT selected_model FROM users WHERE user_id=?", (user_id,))
        result = cursor.fetchone()

    selected_model = result[0] if result else "deepseek-ai/DeepSeek-V3"
    logging.info(f"üìù –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –º–æ–¥–µ–ª—å: {selected_model}")

    if selected_model == 'black-forest-labs/FLUX-1-dev':
        image_url = generate_image_response(selected_model, message.text)
        if image_url:
            await message.answer_photo(image_url, caption=f"üé® –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –ø–æ –∑–∞–ø—Ä–æ—Å—É:\n`{message.text}`")
        else:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")
    else:
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –æ–±—â–µ–Ω–∏—è
        history = get_message_history(user_id)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å —É—á–µ—Ç–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        response = generate_text_response(selected_model, message.text, history)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–≤–µ—Ç –≤ –ë–î
        save_message(user_id, message.text, response)

        await message.answer(response)

# ‚úÖ –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ (—Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º)
def generate_text_response(model, user_input, history):
    try:
        url = f"{DEEPINFRA_API_BASE}/openai/chat/completions"
        headers = {"Authorization": f"Bearer {DEEPINFRA_API_KEY}", "Content-Type": "application/json"}
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
        messages = history + [{"role": "user", "content": user_input}]
        
        data = {
            "model": model,
            "messages": messages,
            "max_tokens": 500
        }

        response = requests.post(url, headers=headers, json=data)
        return response.json()['choices'][0]['message']['content'].strip()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞: {e}")
        return "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è."

# ‚úÖ –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —á–µ—Ä–µ–∑ FLUX
def generate_image_response(model, prompt):
    try:
        url = f"{DEEPINFRA_API_BASE}/models/{model}/generate"
        headers = {"Authorization": f"Bearer {DEEPINFRA_API_KEY}", "Content-Type": "application/json"}
        data = {"prompt": prompt, "num_images": 1}
        response = requests.post(url, headers=headers, json=data)
        return response.json()['data'][0]['url']
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        return None

# ‚úÖ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
